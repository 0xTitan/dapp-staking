{"version":3,"sources":["contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","components/Intro/NoticeNoArtifact.jsx","components/Intro/NoticeWrongNetwork.jsx","components/Intro/UserInformations.jsx","components/Intro/index.jsx","components/Footer/Footer.jsx","components/Footer/index.jsx","components/Navbar/Navbar.jsx","components/Staking/Staking.jsx","components/Staking/index.jsx","components/Mint/Mint.jsx","components/Mint/index.jsx","components/StakingAdmin/StakingAdmin.jsx","components/StakingAdmin/index.jsx","components/AddLiquidity/AddLiquidity.jsx","components/AddLiquidity/index.jsx","App.jsx","index.js"],"names":["EthContext","createContext","actions","initialState","artifact","web3","accounts","networkID","contract","reducer","state","action","type","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","artifactCMC","artifactCMCStaking","artifactCMCLiquidity","artifactERC20","artifactChainlink","artifactFactory","Web3","givenProvider","eth","requestAccounts","net","getId","addressCMC","networks","address","contractCMC","Contract","methods","owner","call","from","isOwnerCMC","console","log","addressCMCStaking","contractCMCStaking","isOwnerCMCStaking","addressCMCLiquidity","contractCMCLiquidity","isOwnerCMCLiquidity","addressChainlink","contractChainlink","factory","addressFactory","contractFactory","error","useEffect","tryInit","require","err","events","handleChange","forEach","e","window","ethereum","on","removeListener","Provider","value","useEth","useContext","NoticeNoArtifact","id","className","NoticeWrongNetwork","UserInformations","props","userAddress","balance","balanceCMC","network","Intro","userInfo","refreshBalance","refreshOwner","useState","setUserAddress","contractAddress","setBalance","setBalanceCMC","setNetwork","getCurrentAddress","getBalance","getCMCBalance","getNetwork","getDetails","valueWei","valueEth","utils","fromWei","Number","toFixed","balanceOf","valueCMC","addr","substring","length","Link","uri","text","href","target","rel","Footer","ethPrice","cmcPrice","onClick","getPricesOnRefresh","artifactPair","MainFooter","setEthPrice","setCmcPrice","getLatestPrice","chainlinkEthPriceRaw","chainlinkEthPrice","slice","getPair","contractPair","abi","getReserves","token0","reserveCMC","reserve0","reserveWETH","reserve1","getPrices","Navbar","to","Staking","tokenAmountToStake","setTokenAmountToStake","tokenAmountToWidthdraw","setTokenAmountToWidthdraw","rewardEarn","setRewardEarn","stakedAmount","setStakedAmount","getStakedBalance","interval","setInterval","getReward","clearInterval","handleStake","decimals","toBN","amount","stakeQty","mul","pow","approve","send","stake","handleWithdraw","withdrawQty","withdraw","stakedBalance","earned","reward","handleWithdrawReward","name","onChange","result","replace","handleStakeAmountChange","handleWidthdrawAmountChange","disabled","isNaN","MainStaking","Mint","tokenAmountToMint","setTokenAmountToMint","handleMint","mintQty","mint","handleMintAmountChange","MainMint","StakingAdmin","adminInstruction","duration","setDuration","hasDuration","setHasDuration","tokenAmount","setTokenAmount","hasRewardAddressDefined","setRewardAddressDefine","finishAt","setFinishAt","blockTimestamp","setBlockTimestamp","isDurationAlreadySet","isTokenAmountAlreadySet","getBlock","block","timestamp","handleSetDuration","setRewardsDuration","handleSetTokenAmount","rewards","defineRewardAmount","handleSetContractAddressForRewardMinting","setStakingContractAddress","handleDurationChange","handleSetTokenAmountChange","MainStakingAdmin","AddLiquidity","addressWETHRopsten","tokenAmountToAddCMC","setTokenAmountToAddCMC","tokenAmountToAddWETH","setTokenAmountToAddWETH","pairAdress","SetPairAdress","lpAmount","setLPAmount","lpStakedAmount","setLPStakedAmount","getPairAdress","getLPBalance","getLPStaked","handleAddLiquidity","amountCMC","amountWETH","approvedCMC","contractWETH","approvedWETH","addLiquidity","handleStakeLiquidity","approved","handleRemoveLiquidity","removeLiquidity","transac","handleWithdrawLiquidity","valueLP","handleCMCAmountChange","handleWETHAmountChange","MainAddLiquidity","App","SetUserInfo","isOwner","setIsOwner","info","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a692dc88.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport {\n  actions,\n  initialState,\n  reducer\n};\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async (\n      artifactCMC,\n      artifactCMCStaking,\n      artifactCMCLiquidity,\n      artifactERC20,\n      artifactChainlink,\n      artifactFactory\n    ) => {\n      if (\n        artifactCMC &&\n        artifactCMCStaking &&\n        artifactCMCLiquidity &&\n        artifactChainlink &&\n        artifactFactory\n      ) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        let addressCMC,\n          contractCMC,\n          addressCMCStaking,\n          contractCMCStaking,\n          addressCMCLiquidity,\n          contractCMCLiquidity,\n          addressChainlink,\n          contractChainlink,\n          addressFactory,\n          contractFactory,\n          isOwnerCMC,\n          isOwnerCMCStaking,\n          isOwnerCMCLiquidity;\n        try {\n          //CMC\n          addressCMC = artifactCMC.networks[networkID].address;\n          contractCMC = new web3.eth.Contract(artifactCMC[\"abi\"], addressCMC);\n          isOwnerCMC =\n            (await contractCMC.methods.owner().call({ from: accounts[0] })) ===\n            accounts[0];\n          console.log(\"isOwnerCMC : \" + isOwnerCMC);\n          //CMC STaking\n          addressCMCStaking = artifactCMCStaking.networks[networkID].address;\n          contractCMCStaking = new web3.eth.Contract(\n            artifactCMCStaking[\"abi\"],\n            addressCMCStaking\n          );\n          isOwnerCMCStaking =\n            (await contractCMCStaking.methods\n              .owner()\n              .call({ from: accounts[0] })) === accounts[0];\n          console.log(\"isOwnerCMCStaking : \" + isOwnerCMCStaking);\n          console.log(\"networkID : \" + networkID);\n\n          //CMC Liquidity\n\n          addressCMCLiquidity =\n            artifactCMCLiquidity.networks[networkID].address;\n          contractCMCLiquidity = new web3.eth.Contract(\n            artifactCMCLiquidity[\"abi\"],\n            addressCMCLiquidity\n          );\n          isOwnerCMCLiquidity =\n            (await contractCMCLiquidity.methods\n              .owner()\n              .call({ from: accounts[0] })) === accounts[0];\n          console.log(\"isOwnerCMCLiquidity : \" + isOwnerCMCLiquidity);\n\n          //Chainlink\n\n          addressChainlink = artifactChainlink.networks[networkID].address;\n          contractChainlink = new web3.eth.Contract(\n            artifactChainlink[\"abi\"],\n            addressChainlink\n          );\n\n          //Factory\n\n          addressFactory = await contractCMCLiquidity.methods.factory().call();\n          contractFactory = new web3.eth.Contract(\n            artifactFactory[\"abi\"],\n            addressFactory\n          );\n\n          //Pair:\n\n          // Pair contract is directly instantiated in Footer component in order to get price\n        } catch (err) {\n          console.error(err);\n        }\n        dispatch({\n          type: actions.init,\n          data: {\n            artifactCMC,\n            artifactCMCStaking,\n            artifactCMCLiquidity,\n            artifactERC20,\n            artifactChainlink,\n            artifactFactory,\n            web3,\n            accounts,\n            networkID,\n            contractCMC,\n            contractCMCStaking,\n            contractCMCLiquidity,\n            contractChainlink,\n            contractFactory,\n            addressCMC,\n            addressCMCStaking,\n            addressCMCLiquidity,\n            addressChainlink,\n            addressFactory,\n            isOwnerCMC,\n            isOwnerCMCStaking,\n            isOwnerCMCLiquidity,\n          },\n        });\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifactCMC = require(\"../../contracts/CMC.json\");\n        const artifactCMCStaking = require(\"../../contracts/CMCStaking.json\");\n        const artifactCMCLiquidity = require(\"../../contracts/CMCLiquidity.json\");\n        const artifactERC20 = require(\"../../contracts/ERC20.json\");\n        const artifactChainlink = require(\"../../contracts/Chainlink.json\");\n        const artifactFactory = require(\"../../contracts/IUniswapV2Factory.json\");\n        init(\n          artifactCMC,\n          artifactCMCStaking,\n          artifactCMCLiquidity,\n          artifactERC20,\n          artifactChainlink,\n          artifactFactory\n        );\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(\n        state.artifactCMC,\n        state.artifactCMCStaking,\n        state.artifactCMCLiquidity,\n        state.artifactERC20,\n        state.artifactChainlink,\n        state.artifactFactory\n      );\n    };\n\n    events.forEach((e) => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach((e) => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [\n    init,\n    state.artifactCMC,\n    state.artifactCMCStaking,\n    state.artifactCMCLiquidity,\n    state.artifactERC20,\n    state.artifactChainlink,\n    state.artifactFactory,\n  ]);\n\n  return (\n    <EthContext.Provider\n      value={{\n        state,\n        dispatch,\n      }}\n    >\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","function NoticeNoArtifact() {\n  return (\n    <p id=\"wrong\">\n      ⚠️ Cannot find <span className=\"code\">Dapp-Staking</span> contract artifact.\n      Please complete the above preparation first, then restart the react dev server.\n    </p>\n  );\n}\n\nexport default NoticeNoArtifact;\n","function NoticeWrongNetwork() {\n  return (\n    <p id=\"wrong\">\n      ⚠️ MetaMask is not connected to the same network as the one this Dapp is deployed to.\n    </p>\n  );\n}\n\nexport default NoticeWrongNetwork;\n","import \"./UserInformations.css\";\n\nfunction UserInformations(props) {\n  return (\n    // <div>\n    //   <ul>\n    //     <li>\n    //       Your address is:{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.userAddress}</span>\n    //     </li>\n    //     <li>\n    //       Dapp contract address:{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.contractAddress}</span>\n    //     </li>\n    //     <li>\n    //       Balance: <span style={{ fontWeight: \"bold\" }}>{props.balance}</span>\n    //     </li>\n    //     <li>\n    //       networkID :{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.networkID}</span>\n    //     </li>\n    //     {/* <li>\n    //       Owner address:{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.ownerAddress}</span>\n    //     </li> */}\n    //   </ul>\n    // </div>\n    <div>\n      {props.userAddress && (\n        <div className=\"class-accountInfo\">\n          <p className=\"class-itemAccountInfo\">{props.userAddress}</p>\n          <p className=\"class-itemAccountInfo\">{props.balance}</p>\n          <p className=\"class-itemAccountInfo\">{props.balanceCMC}</p>\n          <p className=\"class-itemAccountInfo\">{props.network}</p>\n        </div>\n      )}\n      {!props.userAddress && (\n        <div className=\"class-accountInfo\">\n          <p className=\"class-itemAccountInfo\">Not connected</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default UserInformations;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport NoticeNoArtifact from \"./NoticeNoArtifact\";\nimport NoticeWrongNetwork from \"./NoticeWrongNetwork\";\nimport UserInformations from \"./UserInformations\";\n\nfunction Intro({ userInfo, refreshBalance, refreshOwner }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      accounts,\n      address,\n      web3,\n      networkID,\n      isOwnerCMC,\n    },\n  } = useEth();\n\n  const [userAddress, setUserAddress] = useState(null);\n  const [contractAddress, setContractAddress] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [balanceCMC, setBalanceCMC] = useState(0);\n  const [network, setNetwork] = useState(\"\");\n  //const [ownerAddress, setOwnerAddress] = useState(null);\n\n  useEffect(() => {\n    async function getDetails() {\n      if (state && accounts) {\n        getCurrentAddress();\n        getBalance();\n        getCMCBalance();\n        getNetwork();\n      }\n    }\n\n    getDetails();\n  }, [state, address, accounts, userInfo, refreshBalance]);\n\n  const getBalance = async () => {\n    // const value = contract\n    //   ? await contract.methods.winningProposalID().call({ from: accounts[0] })\n    //   : -1;\n\n    const valueWei = web3 ? await web3.eth.getBalance(accounts[0]) : 0;\n    let valueEth = web3 ? web3.utils.fromWei(valueWei, \"ether\") : 0;\n    valueEth = Number(valueEth).toFixed(3);\n    setBalance(valueEth + \" ETH\");\n  };\n\n  const getCMCBalance = async () => {\n    // const value = contract\n    //   ? await contract.methods.winningProposalID().call({ from: accounts[0] })\n    //   : -1;\n\n    const valueWei = contractCMC\n      ? await contractCMC.methods.balanceOf(accounts[0]).call()\n      : 0;\n    console.log(valueWei);\n    let valueCMC = web3 ? web3.utils.fromWei(valueWei, \"ether\") : 0;\n    valueCMC = Number(valueCMC).toFixed(3);\n    setBalanceCMC(valueCMC + \" CMC\");\n  };\n\n  const getCurrentAddress = async () => {\n    if (accounts) {\n      const addr =\n        accounts[0].substring(0, 7) +\n        \"...\" +\n        accounts[0].substring(accounts[0].length - 4, accounts[0].length);\n      setUserAddress(addr);\n      refreshOwner(isOwnerCMC);\n    }\n  };\n\n  const getNetwork = async () => {\n    switch (networkID) {\n      case 1:\n        setNetwork(\"Ethereum\");\n        break;\n      case 3:\n        setNetwork(\"Ropsten\");\n        break;\n      case 4:\n        setNetwork(\"Rinkeby\");\n        break;\n      case 5:\n        setNetwork(\"Goerli\");\n        break;\n      case 42:\n        setNetwork(\"Kovan\");\n        break;\n      default:\n        setNetwork(\"local - Ganache\");\n    }\n  };\n\n  return (\n    <div>\n      {!state.artifactCMC ? (\n        <NoticeNoArtifact />\n      ) : !state.contractCMC ? (\n        <NoticeWrongNetwork />\n      ) : (\n        <UserInformations\n          userAddress={userAddress}\n          contractAddress={contractAddress}\n          balance={balance}\n          balanceCMC={balanceCMC}\n          network={network}\n          // ownerAddress={ownerAddress}\n        />\n      )}\n      <br />\n    </div>\n  );\n}\n\nexport default Intro;\n","import \"./Footer.css\";\n\nfunction Link({ uri, text }) {\n  return (\n    <a href={uri} target=\"_blank\" rel=\"noreferrer\">\n      {text}\n    </a>\n  );\n}\n\nfunction Footer(props) {\n  return (\n    <footer>\n      <h2>Pricing 💰</h2>\n      <br />\n      <p>\n        <b>ETH: </b> {props.ethPrice}$\n      </p>\n      <br />\n      <p>\n        <b>CMC: </b> {props.cmcPrice}$\n      </p>\n      <br />\n      <button\n        onClick={() => {\n          props.getPricesOnRefresh();\n        }}\n      >\n        🔄 Refresh Prices\n      </button>\n      <br />\n      <br />\n      <h2>More resources 📚</h2>\n      <Link uri={\"https://trufflesuite.com\"} text={\"Truffle\"} />\n      <Link uri={\"https://reactjs.org\"} text={\"React\"} />\n      <Link uri={\"https://soliditylang.org\"} text={\"Solidity\"} />\n      <Link uri={\"https://ethereum.org\"} text={\"Ethereum\"} />\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Footer from \"./Footer\";\nconst artifactPair = require(\"../../contracts/IUniswapV2Pair.json\");\n\nfunction MainFooter() {\n  const {\n    state,\n    state: {\n      contractChainlink,\n      contractFactory,\n      addressCMC,\n      accounts,\n      networkID,\n      web3,\n    },\n  } = useEth();\n\n  const [ethPrice, setEthPrice] = useState(0);\n  console.log(0, \"ethPrice =>\", ethPrice);\n  const [cmcPrice, setCmcPrice] = useState(\"no liquidity provided yet\");\n  console.log(0, \"cmcPrice =>\", cmcPrice);\n\n  useEffect(() => {\n    async function getPrices() {\n      let chainlinkEthPriceRaw = await contractChainlink.methods\n        .getLatestPrice()\n        .call();\n\n      let chainlinkEthPrice = Number(chainlinkEthPriceRaw.slice(0, 6)) / 100;\n\n      if (networkID === 42) {\n        const wethAddressKovan = \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\";\n\n        let getPair = await contractFactory.methods\n          .getPair(addressCMC, wethAddressKovan)\n          .call();\n        console.log(\"getPair =>\", getPair);\n\n        if (getPair !== \"0x0000000000000000000000000000000000000000\") {\n          let contractPair = new web3.eth.Contract(artifactPair.abi, getPair);\n          let getReserves = await contractPair.methods.getReserves().call();\n          console.log(\"getReserves =>\", getReserves);\n\n          let reserveCMC;\n          let reserveWETH;\n          let token0 = await contractPair.methods.token0().call();\n\n          token0 === addressCMC\n            ? (reserveCMC =\n                getReserves.reserve0 && (reserveWETH = getReserves.reserve1))\n            : (reserveCMC =\n                getReserves.reserve1 && (reserveWETH = getReserves.reserve0));\n\n          console.log(\"reserveCMC =>\", reserveCMC);\n          console.log(\"reserveWETH =>\", reserveWETH);\n\n          let pooledCmcPrice = (reserveWETH / reserveCMC) * chainlinkEthPrice;\n          setCmcPrice(pooledCmcPrice);\n        }\n      }\n\n      setEthPrice(chainlinkEthPrice);\n    }\n\n    if (state && contractChainlink && contractFactory) {\n      getPrices();\n    }\n  }, [\n    state,\n    accounts,\n    addressCMC,\n    contractChainlink,\n    contractFactory,\n    networkID,\n    web3,\n  ]);\n\n  let getPricesOnRefresh = async () => {\n    console.log(\"getPricesOnRefresh Function\");\n    let chainlinkEthPriceRaw = await contractChainlink.methods\n      .getLatestPrice()\n      .call();\n    let chainlinkEthPrice = Number(chainlinkEthPriceRaw.slice(0, 6)) / 100;\n\n    if (networkID === 42) {\n      const wethAddressKovan = \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\";\n\n      let getPair = await contractFactory.methods\n        .getPair(addressCMC, wethAddressKovan)\n        .call();\n      console.log(\"getPair =>\", getPair);\n\n      if (getPair !== \"0x0000000000000000000000000000000000000000\") {\n        let contractPair = new web3.eth.Contract(artifactPair.abi, getPair);\n        let getReserves = await contractPair.methods.getReserves().call();\n        console.log(\"getReserves =>\", getReserves);\n\n        let reserveCMC;\n        let reserveWETH;\n        let token0 = await contractPair.methods.token0().call();\n\n        token0 === addressCMC\n          ? (reserveCMC =\n              getReserves.reserve0 && (reserveWETH = getReserves.reserve1))\n          : (reserveCMC =\n              getReserves.reserve1 && (reserveWETH = getReserves.reserve0));\n\n        console.log(\"reserveCMC =>\", reserveCMC);\n        console.log(\"reserveWETH =>\", reserveWETH);\n\n        let pooledCmcPrice = (reserveWETH / reserveCMC) * chainlinkEthPrice;\n        setCmcPrice(pooledCmcPrice);\n      }\n    }\n\n    setEthPrice(chainlinkEthPrice);\n  };\n\n  return (\n    <Footer\n      ethPrice={ethPrice}\n      cmcPrice={cmcPrice}\n      getPricesOnRefresh={getPricesOnRefresh}\n    />\n  );\n}\n\nexport default MainFooter;\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navbar.css\";\n\nimport React from \"react\";\n\nfunction Navbar() {\n  return (\n    <>\n      <nav className=\"nav-menu\">\n        <ul className=\"nav-menu-items\">\n          <li className=\"nav-text\" key=\"mint\">\n            <Link to=\"/dapp-staking/mint\">\n              <span>Mint</span>\n            </Link>\n          </li>\n          <li className=\"nav-text\" key=\"stake\">\n            <Link to=\"/dapp-staking/stake\">\n              <span>Stake</span>\n            </Link>\n          </li>\n          <li className=\"nav-text\" key=\"addliquidity\">\n            <Link to=\"/dapp-staking/add-liquidity\">\n              <span>Add liquidity</span>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n}\n\nexport default Navbar;\n","import { useState, useEffect } from \"react\";\nimport \"./Staking.css\";\n\nfunction Staking(props) {\n  const {\n    contractCMC,\n    contractCMCStaking,\n    addressCMCStaking,\n    accounts,\n    web3,\n    refreshBalance,\n  } = props;\n  const [tokenAmountToStake, setTokenAmountToStake] = useState(\n    \"Enter CMC Token amount you want to stake\"\n  );\n  const [tokenAmountToWidthdraw, setTokenAmountToWidthdraw] = useState(\n    \"Enter CMC Token amount you want to withdraw\"\n  );\n\n  const [balanceCMC, setBalanceCMC] = useState(0);\n  const [rewardEarn, setRewardEarn] = useState(0);\n  const [stakedAmount, setStakedAmount] = useState(0);\n\n  useEffect(() => {\n    //get CMC balance\n    const getCMCBalance = async () => {\n      const valueWei = contractCMC\n        ? await contractCMC.methods.balanceOf(accounts[0]).call()\n        : 0;\n      let valueCMC = web3 ? web3.utils.fromWei(valueWei, \"ether\") : 0;\n      setBalanceCMC(valueCMC);\n    };\n\n    getCMCBalance();\n    getStakedBalance();\n\n    //start timer to display reward\n    const interval = setInterval(() => {\n      getReward();\n    }, 3000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  /***********************Staking management************************ */\n  const handleStakeAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmountToStake(result);\n  };\n\n  const handleStake = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmountToStake);\n    const stakeQty = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const approved = await contractCMC.methods\n      .approve(addressCMCStaking, stakeQty)\n      .send({\n        from: accounts[0],\n      });\n    if (approved) {\n      const transact = await contractCMCStaking.methods\n        .stake(stakeQty)\n        .send({ from: accounts[0] });\n      getStakedBalance();\n      refreshBalance(\"refresh after stake\");\n      setTokenAmountToStake(\"\");\n    }\n  };\n\n  /***********************Widthdraw management************************ */\n  const handleWidthdrawAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmountToWidthdraw(result);\n  };\n\n  const handleWithdraw = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmountToWidthdraw);\n    const withdrawQty = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const transact = await contractCMCStaking.methods\n      .withdraw(withdrawQty)\n      .send({ from: accounts[0] });\n    getStakedBalance();\n    refreshBalance(\"refresh after widthdraw\");\n    setTokenAmountToWidthdraw(\"\");\n  };\n\n  /***********************Get staked amout info************************ */\n  const getStakedBalance = async () => {\n    if (contractCMCStaking) {\n      let stakedBalance = await contractCMCStaking.methods\n        .balanceOf(accounts[0])\n        .call();\n      stakedBalance = web3 ? web3.utils.fromWei(stakedBalance, \"ether\") : 0;\n      setStakedAmount(stakedBalance);\n    }\n  };\n\n  /***********************Get reward info*********************** */\n  const getReward = async () => {\n    if (contractCMCStaking) {\n      let reward = await contractCMCStaking.methods.earned(accounts[0]).call();\n      reward = web3 ? web3.utils.fromWei(reward, \"ether\") : 0;\n      setRewardEarn(reward);\n    }\n  };\n\n  /***********************Widthdraw reward************************ */\n  const handleWithdrawReward = async () => {\n    if (contractCMCStaking) {\n      await contractCMCStaking.methods.getReward().send({ from: accounts[0] });\n      getStakedBalance();\n      refreshBalance(\"refresh after get reward\");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"staking-main\">\n        <div className=\"staking-admin-instruction\">\n          <span className=\"admin-instruction\">\n            Please proceed with amount of token you want to set for staking\n          </span>\n        </div>\n        <div className=\"staking-info\">\n          <div>\n            <span className=\"admin-instruction\">\n              Staked amount : {stakedAmount}\n            </span>\n          </div>\n          <div>\n            <span className=\"admin-instruction\">\n              | Rewards earned : {rewardEarn}\n            </span>\n          </div>\n        </div>\n        <div className=\"staking-main-input\">\n          <div className=\"staking-input\">\n            <input\n              className=\"staking-inputTxt\"\n              name=\"stake\"\n              type=\"text\"\n              id=\"stake\"\n              value={tokenAmountToStake}\n              onChange={(e) => handleStakeAmountChange(e)}\n            ></input>\n            <button\n              type=\"button\"\n              className=\"staking-button\"\n              onClick={handleStake}\n              // disabled={duration <= 0 || hasDuration}\n            >\n              <span>Stake</span>\n            </button>\n          </div>\n          <div className=\"widthdraw-input\">\n            <input\n              className=\"widthdraw-inputTxt\"\n              name=\"widthdraw\"\n              type=\"text\"\n              id=\"widthdraw\"\n              value={tokenAmountToWidthdraw}\n              onChange={(e) => handleWidthdrawAmountChange(e)}\n            ></input>\n            <button\n              type=\"button\"\n              className=\"withdraw-button\"\n              onClick={handleWithdraw}\n              disabled={isNaN(tokenAmountToWidthdraw)}\n            >\n              <span>Withdraw</span>\n            </button>\n            <button\n              type=\"button\"\n              className=\"withdrawReward-button\"\n              onClick={handleWithdrawReward}\n              // disabled={duration <= 0 || hasDuration}\n            >\n              <span>Withdraw Reward</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Staking;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Staking from \"./Staking\";\n\nfunction MainStaking({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      accounts,\n      addressCMCStaking,\n      web3,\n    },\n  } = useEth();\n\n  return (\n    <div className=\"main\">\n      {/* <Swap addressCMC={addressCMC} />\n      <hr /> */}\n      {\n        <Staking\n          contractCMC={contractCMC}\n          contractCMCStaking={contractCMCStaking}\n          addressCMCStaking={addressCMCStaking}\n          accounts={accounts}\n          web3={web3}\n          refreshBalance={refreshBalance}\n        />\n      }\n    </div>\n  );\n}\n\nexport default MainStaking;\n","import { useState, useEffect } from \"react\";\nimport \"./Mint.css\";\nimport React from \"react\";\n\nfunction Mint(props) {\n  const {\n    contractCMC,\n    contractCMCStaking,\n    addressCMCStaking,\n    accounts,\n    web3,\n    refreshBalance,\n  } = props;\n  const [tokenAmountToMint, setTokenAmountToMint] = useState(\n    \"Enter CMC Token amount you want to mint\"\n  );\n\n  /***********************Mint management************************ */\n  const handleMintAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmountToMint(result);\n  };\n\n  const handleMint = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmountToMint);\n    const mintQty = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const transact = await contractCMC.methods\n      .mint(mintQty)\n      .send({ from: accounts[0] });\n    refreshBalance(\"refresh after mint\");\n    setTokenAmountToMint(\"\");\n  };\n\n  return (\n    <div className=\"staking-mainMint\">\n      <span className=\"admin-instruction\">\n        Please enter you amount of CMC token you want to mint. Max is 1000 token\n        !\n      </span>\n      <div className=\"mint-input\">\n        <input\n          className=\"mint-inputTxt\"\n          name=\"mint\"\n          type=\"text\"\n          id=\"mint\"\n          value={tokenAmountToMint}\n          onChange={(e) => handleMintAmountChange(e)}\n        ></input>\n        <button\n          type=\"button\"\n          className=\"mint-button\"\n          onClick={handleMint}\n          // disabled={duration <= 0 || hasDuration}\n        >\n          <span>Mint</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Mint;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Mint from \"./Mint\";\n\nfunction MainMint({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      accounts,\n      addressCMCStaking,\n      addressCMC,\n      web3,\n      networkID,\n      isOwnerCMC,\n      isOwnerCMCStaking,\n    },\n  } = useEth();\n\n  return (\n    <div className=\"main\">\n      {/* <Swap addressCMC={addressCMC} />\n      <hr /> */}\n      {\n        <Mint\n          contractCMC={contractCMC}\n          contractCMCStaking={contractCMCStaking}\n          addressCMCStaking={addressCMCStaking}\n          accounts={accounts}\n          web3={web3}\n          refreshBalance={refreshBalance}\n        />\n      }\n    </div>\n  );\n}\n\nexport default MainMint;\n","import { useState, useEffect } from \"react\";\nimport \"./StakingAdmin.css\";\n\nfunction StakingAdmin(props) {\n  const {\n    contractCMC,\n    contractCMCStaking,\n    addressCMCStaking,\n    accounts,\n    web3,\n    adminInstruction,\n  } = props;\n  const [duration, setDuration] = useState(\"Enter reward duration in (s)\");\n  const [hasDuration, setHasDuration] = useState(false);\n  const [tokenAmount, setTokenAmount] = useState(\n    \"Enter CMC Token amount for reward\"\n  );\n  const [hasTokenAmount, setHasTokenAmount] = useState(false);\n  const [hasRewardAddressDefined, setRewardAddressDefine] = useState(false);\n  const [finishAt, setFinishAt] = useState(0);\n  const [blockTimestamp, setBlockTimestamp] = useState(0);\n\n  useEffect(() => {\n    isDurationAlreadySet();\n    isTokenAmountAlreadySet();\n  });\n\n  const isDurationAlreadySet = async () => {\n    const value = await contractCMCStaking.methods.duration().call();\n    if (value && value > 0) {\n      setDuration(value);\n      setHasDuration(true);\n    }\n  };\n\n  const isTokenAmountAlreadySet = async () => {\n    const block = await web3.eth.getBlock(\"latest\");\n    setBlockTimestamp(block.timestamp);\n    const value = await contractCMCStaking.methods.finishAt().call();\n    if (value && value > 0) {\n      setFinishAt(value);\n      //setHasTokenAmount(true);\n    }\n  };\n\n  const isRewardAddressDefined = async () => {\n    const value = await contractCMC.methods.stakingContract().call();\n    if (value) {\n      setRewardAddressDefine(true);\n    }\n  };\n\n  const handleDurationChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setDuration(result);\n  };\n\n  const handleSetDuration = async () => {\n    console.log(duration);\n    console.log(contractCMCStaking);\n    const transact = await contractCMCStaking.methods\n      .setRewardsDuration(duration)\n      .send({ from: accounts[0] });\n    setHasDuration(true);\n    // showEvent(\n    //   \"Voter added  :\" +\n    //     transact.events.VoterRegistered.returnValues.voterAddress\n    // );\n  };\n\n  const handleSetTokenAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmount(result);\n  };\n\n  const handleSetTokenAmount = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmount);\n    const rewards = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const transact = await contractCMCStaking.methods\n      .defineRewardAmount(rewards)\n      .send({ from: accounts[0] });\n    isTokenAmountAlreadySet();\n    // showEvent(\n    //   \"Voter added  :\" +\n    //     transact.events.VoterRegistered.returnValues.voterAddress\n    // );\n  };\n\n  const handleSetContractAddressForRewardMinting = async () => {\n    const transact = await contractCMC.methods\n      .setStakingContractAddress(addressCMCStaking)\n      .send({ from: accounts[0] });\n    setRewardAddressDefine(true);\n    // showEvent(\n    //   \"Voter added  :\" +\n    //     transact.events.VoterRegistered.returnValues.voterAddress\n    // );\n  };\n\n  return (\n    <>\n      <div className=\"stakingAdmin-main\">\n        <span className=\"admin-instruction\">{adminInstruction}</span>\n        <div className=\"stakingAdmin-info\">\n          <div>\n            <span className=\"admin-instruction\">\n              Current block time is : {blockTimestamp}\n            </span>\n          </div>\n          <div>\n            <span className=\"admin-instruction\">\n              | Program finish at : {finishAt}\n            </span>\n          </div>\n        </div>\n        <div className=\"stakingAdmin-duration\">\n          <div className=\"duration-input\">\n            <input\n              className=\"duration-inputTxt\"\n              name=\"duration\"\n              type=\"text\"\n              id=\"duration\"\n              value={duration}\n              onChange={(e) => handleDurationChange(e)}\n              disabled={hasDuration}\n            ></input>\n            <button\n              type=\"button\"\n              className=\"duration-button\"\n              onClick={handleSetDuration}\n              disabled={duration <= 0 || hasDuration}\n            >\n              <span>Set duration</span>\n            </button>\n          </div>\n          <div className=\"stakingAdmin-tokenAmount\">\n            <div className=\"tokenAmount-input\">\n              <input\n                className=\"tokenAmount-inputTxt\"\n                name=\"tokenAmount\"\n                type=\"text\"\n                id=\"tokenAmount\"\n                value={tokenAmount}\n                onChange={(e) => handleSetTokenAmountChange(e)}\n                // disabled={hasTokenAmount}\n              ></input>\n              <button\n                type=\"button\"\n                className=\"tokenAmount-button\"\n                onClick={handleSetTokenAmount}\n                // disabled={tokenAmount <= 0 || hasTokenAmount}\n              >\n                <span>Set token amount</span>\n              </button>\n            </div>\n            <div className=\"stakingAdmin-mintAdress\">\n              <button\n                type=\"button\"\n                className=\"setAdressForReward-button\"\n                onClick={handleSetContractAddressForRewardMinting}\n                disabled={hasRewardAddressDefined}\n              >\n                <span>Allow this contract for reward minting</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default StakingAdmin;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport StakingAdmin from \"./StakingAdmin\";\n\nfunction MainStakingAdmin({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      contractCMCLiquidity,\n      accounts,\n      addressCMCStaking,\n      addressCMCLiquidity,\n      web3,\n      networkID,\n      isOwnerCMC,\n      isOwnerCMCStaking,\n    },\n  } = useEth();\n\n  return (\n    <div className=\"main\">\n      <StakingAdmin\n        key=\"simpleStaking\"\n        contractCMC={contractCMC}\n        contractCMCStaking={contractCMCStaking}\n        addressCMCStaking={addressCMCStaking}\n        accounts={accounts}\n        web3={web3}\n        adminInstruction={\n          \"Admin please proceed with SIMPLE staking program configuration\"\n        }\n      />\n      <hr></hr>\n      <StakingAdmin\n        key=\"liquidityStaking\"\n        contractCMC={contractCMC}\n        contractCMCStaking={contractCMCLiquidity}\n        addressCMCStaking={addressCMCLiquidity}\n        accounts={accounts}\n        web3={web3}\n        adminInstruction={\n          \"Admin please proceed with LIQUIDITY staking program configuration\"\n        }\n      />\n    </div>\n  );\n}\n\nexport default MainStakingAdmin;\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./AddLiquidity.css\";\n\nfunction AddLiquidity(props) {\n  const {\n    artifactERC20,\n    addressCMC,\n    addressCMCLiquidity,\n    contractCMC,\n    contractCMCLiquidity,\n    accounts,\n    web3,\n    refreshBalance,\n  } = props;\n\n  //const addressWETHRopsten = \"0xc778417E063141139Fce010982780140Aa0cD5Ab\";\n  const addressWETHRopsten = \"0xbf4c0a77A3072FDaFC60e5758bC0243d40358f29\";\n\n  const [tokenAmountToAddCMC, setTokenAmountToAddCMC] = useState(\n    \"Enter CMC Token amount you want to add\"\n  );\n\n  const [tokenAmountToAddWETH, setTokenAmountToAddWETH] = useState(\n    \"Enter WETH Token amount you want to add\"\n  );\n\n  const [pairAdress, SetPairAdress] = useState(0);\n  const [lpAmount, setLPAmount] = useState(0);\n  const [lpStakedAmount, setLPStakedAmount] = useState(0);\n  const [rewardEarn, setRewardEarn] = useState(0);\n\n  useEffect(() => {\n    getPairAdress();\n    getLPBalance();\n    getLPStaked();\n    //start timer to display reward\n    const interval = setInterval(() => {\n      getReward();\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  /***********************add liquidity management************************ */\n  const handleCMCAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value\n      .replace(/[^0-9.]/g, \"\")\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      .replace(/^0[^.]/, \"0\");\n    setTokenAmountToAddCMC(result);\n  };\n\n  const handleWETHAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value\n      .replace(/[^0-9.]/g, \"\")\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      .replace(/^0[^.]/, \"0\");\n    setTokenAmountToAddWETH(result);\n  };\n\n  const handleAddLiquidity = async () => {\n    const amountCMC = web3.utils.toBN(tokenAmountToAddCMC * 1e18);\n    const amountWETH = web3.utils.toBN(tokenAmountToAddWETH * 1e18);\n    //const qtyCMC = amountCMC.mul(web3.utils.toBN(10).pow(decimals));\n    //const qtyWETH = amountWETH.mul(web3.utils.toBN(10).pow(decimals));\n\n    //approve CMC liquidity\n    const approvedCMC = await contractCMC.methods\n      .approve(addressCMCLiquidity, amountCMC)\n      .send({\n        from: accounts[0],\n      });\n\n    //approve WETH\n    const contractWETH = new web3.eth.Contract(\n      artifactERC20[\"abi\"],\n      addressWETHRopsten\n    );\n\n    const approvedWETH = await contractWETH.methods\n      .approve(addressCMCLiquidity, amountWETH)\n      .send({\n        from: accounts[0],\n      });\n\n    if (approvedCMC && approvedWETH) {\n      try {\n        const transac = await contractCMCLiquidity.methods\n          .addLiquidity(addressWETHRopsten, addressCMC, amountWETH, amountCMC)\n          .send({ from: accounts[0] });\n        // const transact = await contractCMC.methods\n        //   .mint(mintQty)\n        //   .send({ from: accounts[0] });\n\n        refreshBalance(\"refresh after add liquidity\");\n        setTokenAmountToAddCMC(\"\");\n        setTokenAmountToAddWETH(\"\");\n      } catch (err) {\n        console.log(\"Error when adding liquidity : \" + err);\n      }\n    }\n  };\n\n  /************************Handle stake liquidity************************** */\n\n  const handleStakeLiquidity = async () => {\n    const amount = 0.1 * 1e18;\n    const stakeQty = web3.utils.toBN(amount);\n    const contractPair = new web3.eth.Contract(\n      artifactERC20[\"abi\"],\n      pairAdress\n    );\n\n    //we approve cmc liquidity contract to manage LP and stake them\n    const approved = await contractPair.methods\n      .approve(addressCMCLiquidity, stakeQty)\n      .send({\n        from: accounts[0],\n      });\n    console.log(\"approved\");\n    let transac;\n    if (approved) {\n      try {\n        transac = await contractCMCLiquidity.methods\n          .stake(stakeQty)\n          .send({ from: accounts[0] });\n        refreshBalance(\"refresh after stake lp\");\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  /************************Remove liquidity************************** */\n\n  const handleRemoveLiquidity = async () => {\n    //approve WETH\n    const contractPair = new web3.eth.Contract(\n      artifactERC20[\"abi\"],\n      pairAdress\n    );\n\n    const amount = lpAmount * 1e18;\n    console.log(amount);\n    const approvedPair = await contractPair.methods\n      .approve(addressCMCLiquidity, web3.utils.toBN(amount))\n      .send({\n        from: accounts[0],\n      });\n\n    if (approvedPair) {\n      try {\n        const transac = await contractCMCLiquidity.methods\n          .removeLiquidity(addressWETHRopsten, addressCMC)\n          .send({ from: accounts[0] });\n        // const transact = await contractCMC.methods\n        //   .mint(mintQty)\n        //   .send({ from: accounts[0] });\n        console.log(transac);\n        refreshBalance(\"refresh after remove liquidity\");\n        getLPBalance();\n      } catch (err) {\n        console.log(\"Error when adding liquidity : \" + err);\n      }\n    }\n  };\n\n  /************************Withdraw LP************************** */\n\n  const handleWithdrawLiquidity = async () => {\n    const amount = lpStakedAmount * 1e18;\n    const stakeQty = web3.utils.toBN(amount);\n    const transact = await contractCMCLiquidity.methods\n      .withdraw(stakeQty)\n      .send({ from: accounts[0] });\n    refreshBalance(\"refresh after widthdraw LP\");\n  };\n\n  /************************Withdraw Reward************************** */\n\n  const handleWithdrawReward = async () => {\n    if (contractCMCLiquidity) {\n      await contractCMCLiquidity.methods\n        .getReward()\n        .send({ from: accounts[0] });\n      getLPBalance();\n      refreshBalance(\"refresh after get liq reward\");\n    }\n  };\n\n  /****************Get LP balance **************************************/\n  const getLPBalance = async () => {\n    const contractPair =\n      web3 &&\n      pairAdress &&\n      new web3.eth.Contract(artifactERC20[\"abi\"], pairAdress);\n\n    const balance = contractPair\n      ? await contractPair.methods.balanceOf(accounts[0]).call()\n      : 0;\n\n    let valueLP = web3\n      ? web3.utils.fromWei(web3.utils.toBN(balance), \"ether\")\n      : 0;\n\n    setLPAmount(valueLP);\n  };\n\n  const getLPStaked = async () => {\n    const balance =\n      contractCMCLiquidity &&\n      (await contractCMCLiquidity.methods.balanceOf(accounts[0]).call());\n\n    let valueLP = web3\n      ? web3.utils.fromWei(web3.utils.toBN(balance), \"ether\")\n      : 0;\n\n    setLPStakedAmount(valueLP);\n  };\n\n  /***********************Get reward info*********************** */\n  const getReward = async () => {\n    if (contractCMCLiquidity) {\n      let reward = await contractCMCLiquidity.methods\n        .earned(accounts[0])\n        .call();\n      reward = web3 ? web3.utils.fromWei(reward, \"ether\") : 0;\n      setRewardEarn(reward);\n    }\n  };\n\n  const getPairAdress = async () => {\n    const addr =\n      contractCMCLiquidity &&\n      (await contractCMCLiquidity.methods\n        .getPairAdress(addressWETHRopsten, addressCMC)\n        .call());\n    SetPairAdress(addr);\n    console.log(\"pair address : \" + addr);\n  };\n\n  return (\n    <div className=\"addLiquidity-main\">\n      <span className=\"admin-instruction\">\n        Please add liquitiy. For now now only CMC/WETH pair is available. More\n        will come soon !\n      </span>\n      <div className=\"lp-info\">\n        <div>\n          <span className=\"admin-instruction\">lp amount : {lpAmount}</span>\n        </div>\n        <div>\n          <span className=\"admin-instruction\">\n            | lp staked : {lpStakedAmount}\n          </span>\n        </div>\n        <div>\n          <span className=\"admin-instruction\">\n            | Rewards earned : {rewardEarn}\n          </span>\n        </div>\n      </div>\n      <div className=\"addLiquidity-operation\">\n        <div className=\"addLiquidity-asset\">\n          <div className=\"input-box\">\n            <input\n              className=\"tokenCMC-inputTxt\"\n              name=\"tokenCMC\"\n              type=\"text\"\n              id=\"tokenCMC\"\n              value={tokenAmountToAddCMC}\n              onChange={(e) => handleCMCAmountChange(e)}\n            ></input>\n            <span className=\"unit\">CMC</span>\n          </div>\n          <div className=\"input-box\">\n            <input\n              className=\"tokenWETH-inputTxt\"\n              name=\"tokenWETH\"\n              type=\"text\"\n              id=\"tokenWETH\"\n              value={tokenAmountToAddWETH}\n              onChange={(e) => handleWETHAmountChange(e)}\n            ></input>\n            <span className=\"unit\">WETH</span>\n          </div>\n        </div>\n        <div className=\"addLiquidity-deposit\">\n          <button\n            type=\"button\"\n            className=\"addLiquidity-button\"\n            onClick={handleAddLiquidity}\n            // disabled={duration <= 0 || hasDuration}\n          >\n            <span>Add liquidity</span>\n          </button>\n        </div>\n      </div>\n      <div className=\"withdrawLiquidity-operation\">\n        <div className=\"stakeLiquidity-stake\">\n          <button\n            type=\"button\"\n            className=\"stakeLiquidity-button\"\n            onClick={handleStakeLiquidity}\n            disabled={!lpAmount > 0}\n          >\n            <span>Stake LP</span>\n          </button>\n        </div>\n        <div className=\"withdrawLiquidity-remove\">\n          <button\n            type=\"button\"\n            className=\"removeLiquidity-button\"\n            onClick={handleRemoveLiquidity}\n            disabled={!lpAmount > 0}\n          >\n            <span>Remove LP</span>\n          </button>\n        </div>\n        <div className=\"withdrawLiquidity-lp\">\n          <button\n            type=\"button\"\n            className=\"withdrawLiquidityLp-button\"\n            onClick={handleWithdrawLiquidity}\n            disabled={!lpAmount > 0}\n          >\n            <span>Withdraw LP</span>\n          </button>\n        </div>\n        <div className=\"withdrawLiquidity-reward\">\n          <button\n            type=\"button\"\n            className=\"withdrawReward-button\"\n            onClick={handleWithdrawReward}\n            // disabled={duration <= 0 || hasDuration}\n          >\n            <span>Withdraw rewards</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddLiquidity;\n","import React from \"react\";\nimport AddLiquidity from \"./AddLiquidity\";\nimport useEth from \"../../contexts/EthContext/useEth\";\n\nfunction MainAddLiquidity({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      artifactERC20,\n      addressCMC,\n      addressCMCLiquidity,\n      contractCMC,\n      contractCMCLiquidity,\n      accounts,\n      web3,\n      networkID,\n      isOwnerCMC,\n      isOwnerCMCStaking,\n    },\n  } = useEth();\n\n  return (\n    <AddLiquidity\n      artifactERC20={artifactERC20}\n      addressCMC={addressCMC}\n      addressCMCLiquidity={addressCMCLiquidity}\n      contractCMC={contractCMC}\n      contractCMCLiquidity={contractCMCLiquidity}\n      accounts={accounts}\n      web3={web3}\n      refreshBalance={refreshBalance}\n    />\n  );\n}\n\nexport default MainAddLiquidity;\n","import { EthProvider } from \"./contexts/EthContext\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport useEth from \"./contexts/EthContext/useEth\";\nimport Intro from \"./components/Intro/\";\nimport MainFooter from \"./components/Footer\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport MainStaking from \"./components/Staking\";\nimport MainMint from \"./components/Mint\";\nimport MainStakingAdmin from \"./components/StakingAdmin\";\nimport \"./App.css\";\nimport MainAddLiquidity from \"./components/AddLiquidity\";\n\nfunction App() {\n  const [userInfo, SetUserInfo] = useState();\n  const [isOwner, setIsOwner] = useState(false);\n\n  const refreshBalance = (info) => {\n    SetUserInfo(info);\n  };\n\n  const refreshOwner = (isOwner) => {\n    setIsOwner(isOwner);\n  };\n\n  return (\n    <BrowserRouter>\n      <EthProvider>\n        <div id=\"App\">\n          {!isOwner && <div className=\"app-navbar\">{<Navbar />}</div>}\n          <div className=\"container\">\n            <Intro\n              userInfo={userInfo}\n              refreshBalance={refreshBalance}\n              refreshOwner={refreshOwner}\n            />\n\n            <Routes>\n              <Route\n                path=\"/dapp-staking/\"\n                element={\n                  isOwner ? (\n                    <MainStakingAdmin />\n                  ) : (\n                    <div className=\"welcome\">\n                      <span className=\"instruction\">\n                        Welcome to CMC staking dapp. Please first mint some\n                        token then enjoy staking !!!\n                      </span>\n                    </div>\n                  )\n                }\n              />\n              <Route\n                path=\"/dapp-staking/mint\"\n                element={\n                  !isOwner ? (\n                    <MainMint refreshBalance={refreshBalance} />\n                  ) : (\n                    <Navigate to=\"/dapp-staking\" replace />\n                  )\n                }\n              />\n              <Route\n                path=\"/dapp-staking/stake\"\n                element={\n                  !isOwner ? (\n                    <MainStaking refreshBalance={refreshBalance} />\n                  ) : (\n                    <Navigate to=\"/dapp-staking\" replace />\n                  )\n                }\n              />\n              <Route\n                path=\"/dapp-staking/add-liquidity\"\n                element={\n                  !isOwner ? (\n                    <MainAddLiquidity refreshBalance={refreshBalance} />\n                  ) : (\n                    <Navigate to=\"/dapp-staking\" replace />\n                  )\n                }\n              />\n\n              {/* <Main refreshBalance={refreshBalance} /> */}\n\n              <Route\n                path=\"*\"\n                element={<Navigate to=\"/dapp-staking\" replace />}\n              />\n            </Routes>\n            <MainFooter />\n          </div>\n        </div>\n      </EthProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}