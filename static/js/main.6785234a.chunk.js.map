{"version":3,"sources":["contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","components/Intro/NoticeNoArtifact.jsx","components/Intro/NoticeWrongNetwork.jsx","components/Intro/UserInformations.jsx","components/Intro/index.jsx","components/Footer/Footer.jsx","components/Navbar/Navbar.jsx","components/Staking/Staking.jsx","components/Staking/index.jsx","components/Mint/Mint.jsx","components/Mint/index.jsx","components/StakingAdmin/StakingAdmin.jsx","components/StakingAdmin/index.jsx","components/AddLiquidity/AddLiquidity.jsx","components/AddLiquidity/index.jsx","App.jsx","index.js"],"names":["EthContext","createContext","actions","initialState","artifact","web3","accounts","networkID","contract","reducer","state","action","type","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","artifactCMC","artifactCMCStaking","artifactCMCLiquidity","artifactERC20","artifactChainlink","Web3","givenProvider","eth","requestAccounts","net","getId","addressCMC","networks","address","contractCMC","Contract","methods","owner","call","from","isOwnerCMC","console","log","addressCMCStaking","contractCMCStaking","isOwnerCMCStaking","addressCMCLiquidity","contractCMCLiquidity","isOwnerCMCLiquidity","addressChainlink","contractChainlink","error","useEffect","tryInit","require","err","events","handleChange","forEach","e","window","ethereum","on","removeListener","Provider","value","useEth","useContext","NoticeNoArtifact","id","className","NoticeWrongNetwork","UserInformations","props","userAddress","balance","balanceCMC","network","Intro","userInfo","refreshBalance","refreshOwner","useState","setUserAddress","contractAddress","setBalance","setBalanceCMC","setNetwork","getCurrentAddress","getBalance","getCMCBalance","getNetwork","getDetails","valueWei","valueEth","utils","fromWei","Number","toFixed","balanceOf","valueCMC","addr","substring","length","Link","uri","text","href","target","rel","Footer","Navbar","to","Staking","tokenAmountToStake","setTokenAmountToStake","tokenAmountToWidthdraw","setTokenAmountToWidthdraw","rewardEarn","setRewardEarn","stakedAmount","setStakedAmount","getStakedBalance","interval","setInterval","getReward","clearInterval","handleStake","decimals","toBN","amount","stakeQty","mul","pow","approve","send","stake","handleWithdraw","withdrawQty","withdraw","stakedBalance","earned","reward","handleWithdrawReward","name","onChange","result","replace","handleStakeAmountChange","onClick","handleWidthdrawAmountChange","disabled","isNaN","MainStaking","Mint","tokenAmountToMint","setTokenAmountToMint","handleMint","mintQty","mint","handleMintAmountChange","MainMint","StakingAdmin","adminInstruction","duration","setDuration","hasDuration","setHasDuration","tokenAmount","setTokenAmount","hasRewardAddressDefined","setRewardAddressDefine","finishAt","setFinishAt","blockTimestamp","setBlockTimestamp","isDurationAlreadySet","isTokenAmountAlreadySet","getBlock","block","timestamp","handleSetDuration","setRewardsDuration","handleSetTokenAmount","rewards","defineRewardAmount","handleSetContractAddressForRewardMinting","setStakingContractAddress","handleDurationChange","handleSetTokenAmountChange","MainStakingAdmin","AddLiquidity","addressWETHRopsten","tokenAmountToAddCMC","setTokenAmountToAddCMC","tokenAmountToAddWETH","setTokenAmountToAddWETH","pairAdress","SetPairAdress","lpAmount","setLPAmount","lpStakedAmount","setLPStakedAmount","getPairAdress","getLPBalance","getLPStaked","handleAddLiquidity","amountCMC","amountWETH","approvedCMC","contractWETH","approvedWETH","addLiquidity","handleStakeLiquidity","contractPair","approved","handleRemoveLiquidity","removeLiquidity","transac","handleWithdrawLiquidity","valueLP","handleCMCAmountChange","handleWETHAmountChange","MainAddLiquidity","App","SetUserInfo","isOwner","setIsOwner","info","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6785234a.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport {\n  actions,\n  initialState,\n  reducer\n};\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async (\n      artifactCMC,\n      artifactCMCStaking,\n      artifactCMCLiquidity,\n      artifactERC20,\n      artifactChainlink\n    ) => {\n      if (\n        artifactCMC &&\n        artifactCMCStaking &&\n        artifactCMCLiquidity &&\n        artifactChainlink\n      ) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        let addressCMC,\n          contractCMC,\n          addressCMCStaking,\n          contractCMCStaking,\n          addressCMCLiquidity,\n          contractCMCLiquidity,\n          addressChainlink,\n          contractChainlink,\n          isOwnerCMC,\n          isOwnerCMCStaking,\n          isOwnerCMCLiquidity;\n        try {\n          //CMC\n          addressCMC = artifactCMC.networks[networkID].address;\n          contractCMC = new web3.eth.Contract(artifactCMC[\"abi\"], addressCMC);\n          isOwnerCMC =\n            (await contractCMC.methods.owner().call({ from: accounts[0] })) ===\n            accounts[0];\n          console.log(\"isOwnerCMC : \" + isOwnerCMC);\n          //CMC STaking\n          addressCMCStaking = artifactCMCStaking.networks[networkID].address;\n          contractCMCStaking = new web3.eth.Contract(\n            artifactCMCStaking[\"abi\"],\n            addressCMCStaking\n          );\n          isOwnerCMCStaking =\n            (await contractCMCStaking.methods\n              .owner()\n              .call({ from: accounts[0] })) === accounts[0];\n          console.log(\"isOwnerCMCStaking : \" + isOwnerCMCStaking);\n          console.log(\"networkID : \" + networkID);\n\n          //CMC Liquidity\n\n          addressCMCLiquidity =\n            artifactCMCLiquidity.networks[networkID].address;\n          contractCMCLiquidity = new web3.eth.Contract(\n            artifactCMCLiquidity[\"abi\"],\n            addressCMCLiquidity\n          );\n          isOwnerCMCLiquidity =\n            (await contractCMCLiquidity.methods\n              .owner()\n              .call({ from: accounts[0] })) === accounts[0];\n          console.log(\"isOwnerCMCLiquidity : \" + isOwnerCMCLiquidity);\n\n          //Chainlink\n\n          addressChainlink = artifactChainlink.networks[networkID].address;\n          contractChainlink = new web3.eth.Contract(\n            artifactChainlink[\"abi\"],\n            addressChainlink\n          );\n        } catch (err) {\n          console.error(err);\n        }\n        dispatch({\n          type: actions.init,\n          data: {\n            artifactCMC,\n            artifactCMCStaking,\n            artifactCMCLiquidity,\n            artifactERC20,\n            artifactChainlink,\n            web3,\n            accounts,\n            networkID,\n            contractCMC,\n            contractCMCStaking,\n            contractCMCLiquidity,\n            contractChainlink,\n            addressCMC,\n            addressCMCStaking,\n            addressCMCLiquidity,\n            isOwnerCMC,\n            isOwnerCMCStaking,\n            isOwnerCMCLiquidity,\n          },\n        });\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifactCMC = require(\"../../contracts/CMC.json\");\n        const artifactCMCStaking = require(\"../../contracts/CMCStaking.json\");\n        const artifactCMCLiquidity = require(\"../../contracts/CMCLiquidity.json\");\n        const artifactERC20 = require(\"../../contracts/ERC20.json\");\n        const artifactChainlink = require(\"../../contracts/Chainlink.json\");\n        init(\n          artifactCMC,\n          artifactCMCStaking,\n          artifactCMCLiquidity,\n          artifactERC20,\n          artifactChainlink\n        );\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(\n        state.artifactCMC,\n        state.artifactCMCStaking,\n        state.artifactCMCLiquidity,\n        state.artifactERC20,\n        state.artifactChainlink\n      );\n    };\n\n    events.forEach((e) => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach((e) => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [\n    init,\n    state.artifactCMC,\n    state.artifactCMCStaking,\n    state.artifactCMCLiquidity,\n    state.artifactERC20,\n    state.artifactChainlink,\n  ]);\n\n  return (\n    <EthContext.Provider\n      value={{\n        state,\n        dispatch,\n      }}\n    >\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","function NoticeNoArtifact() {\n  return (\n    <p id=\"wrong\">\n      ⚠️ Cannot find <span className=\"code\">Dapp-Staking</span> contract artifact.\n      Please complete the above preparation first, then restart the react dev server.\n    </p>\n  );\n}\n\nexport default NoticeNoArtifact;\n","function NoticeWrongNetwork() {\n  return (\n    <p id=\"wrong\">\n      ⚠️ MetaMask is not connected to the same network as the one this Dapp is deployed to.\n    </p>\n  );\n}\n\nexport default NoticeWrongNetwork;\n","import \"./UserInformations.css\";\n\nfunction UserInformations(props) {\n  return (\n    // <div>\n    //   <ul>\n    //     <li>\n    //       Your address is:{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.userAddress}</span>\n    //     </li>\n    //     <li>\n    //       Dapp contract address:{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.contractAddress}</span>\n    //     </li>\n    //     <li>\n    //       Balance: <span style={{ fontWeight: \"bold\" }}>{props.balance}</span>\n    //     </li>\n    //     <li>\n    //       networkID :{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.networkID}</span>\n    //     </li>\n    //     {/* <li>\n    //       Owner address:{\" \"}\n    //       <span style={{ fontWeight: \"bold\" }}>{props.ownerAddress}</span>\n    //     </li> */}\n    //   </ul>\n    // </div>\n    <div>\n      {props.userAddress && (\n        <div className=\"class-accountInfo\">\n          <p className=\"class-itemAccountInfo\">{props.userAddress}</p>\n          <p className=\"class-itemAccountInfo\">{props.balance}</p>\n          <p className=\"class-itemAccountInfo\">{props.balanceCMC}</p>\n          <p className=\"class-itemAccountInfo\">{props.network}</p>\n        </div>\n      )}\n      {!props.userAddress && (\n        <div className=\"class-accountInfo\">\n          <p className=\"class-itemAccountInfo\">Not connected</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default UserInformations;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport NoticeNoArtifact from \"./NoticeNoArtifact\";\nimport NoticeWrongNetwork from \"./NoticeWrongNetwork\";\nimport UserInformations from \"./UserInformations\";\n\nfunction Intro({ userInfo, refreshBalance, refreshOwner }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      accounts,\n      address,\n      web3,\n      networkID,\n      isOwnerCMC,\n    },\n  } = useEth();\n\n  const [userAddress, setUserAddress] = useState(null);\n  console.log(\"userAddress =>\", userAddress);\n\n  const [contractAddress, setContractAddress] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [balanceCMC, setBalanceCMC] = useState(0);\n  const [network, setNetwork] = useState(\"\");\n  //const [ownerAddress, setOwnerAddress] = useState(null);\n\n  useEffect(() => {\n    async function getDetails() {\n      if (state && accounts) {\n        //à implémenter lorsque nous aurons ajouté l'inheritance ownable d'Open Zeppelin:\n        //let owner = await contract.methods.owner().call();\n\n        //setUserAddress(accounts);\n        //setContractAddress(address);\n        //setOwnerAddress(owner);\n\n        getCurrentAddress();\n        getBalance();\n        getCMCBalance();\n        getNetwork();\n      }\n    }\n\n    getDetails();\n  }, [state, address, accounts, userInfo, refreshBalance]);\n\n  const getBalance = async () => {\n    // const value = contract\n    //   ? await contract.methods.winningProposalID().call({ from: accounts[0] })\n    //   : -1;\n\n    const valueWei = web3 ? await web3.eth.getBalance(accounts[0]) : 0;\n    let valueEth = web3 ? web3.utils.fromWei(valueWei, \"ether\") : 0;\n    valueEth = Number(valueEth).toFixed(3);\n    setBalance(valueEth + \" ETH\");\n  };\n\n  const getCMCBalance = async () => {\n    // const value = contract\n    //   ? await contract.methods.winningProposalID().call({ from: accounts[0] })\n    //   : -1;\n\n    const valueWei = contractCMC\n      ? await contractCMC.methods.balanceOf(accounts[0]).call()\n      : 0;\n    console.log(valueWei);\n    let valueCMC = web3 ? web3.utils.fromWei(valueWei, \"ether\") : 0;\n    valueCMC = Number(valueCMC).toFixed(3);\n    setBalanceCMC(valueCMC + \" CMC\");\n  };\n\n  const getCurrentAddress = async () => {\n    if (accounts) {\n      const addr =\n        accounts[0].substring(0, 7) +\n        \"...\" +\n        accounts[0].substring(accounts[0].length - 4, accounts[0].length);\n      setUserAddress(addr);\n      refreshOwner(isOwnerCMC);\n    }\n  };\n\n  const getNetwork = async () => {\n    switch (networkID) {\n      case 1:\n        setNetwork(\"Ethereum\");\n        break;\n      case 3:\n        setNetwork(\"Ropsten\");\n        break;\n      case 4:\n        setNetwork(\"Rinkeby\");\n        break;\n      case 5:\n        setNetwork(\"Goerli\");\n        break;\n      default:\n        setNetwork(\"local - Ganache\");\n    }\n  };\n\n  return (\n    <div>\n      {!state.artifactCMC ? (\n        <NoticeNoArtifact />\n      ) : !state.contractCMC ? (\n        <NoticeWrongNetwork />\n      ) : (\n        <UserInformations\n          userAddress={userAddress}\n          contractAddress={contractAddress}\n          balance={balance}\n          balanceCMC={balanceCMC}\n          network={network}\n          // ownerAddress={ownerAddress}\n        />\n      )}\n      <br />\n    </div>\n  );\n}\n\nexport default Intro;\n","import \"./Footer.css\";\n\nfunction Link({ uri, text }) {\n  return (\n    <a href={uri} target=\"_blank\" rel=\"noreferrer\">\n      {text}\n    </a>\n  );\n}\n\nfunction Footer() {\n  return (\n    <footer>\n      <h2>More resources</h2>\n      <Link uri={\"https://trufflesuite.com\"} text={\"Truffle\"} />\n      <Link uri={\"https://reactjs.org\"} text={\"React\"} />\n      <Link uri={\"https://soliditylang.org\"} text={\"Solidity\"} />\n      <Link uri={\"https://ethereum.org\"} text={\"Ethereum\"} />\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navbar.css\";\n\nimport React from \"react\";\n\nfunction Navbar() {\n  return (\n    <>\n      <nav className=\"nav-menu\">\n        <ul className=\"nav-menu-items\">\n          <li className=\"nav-text\" key=\"mint\">\n            <Link to=\"/dapp-staking/mint\">\n              <span>Mint</span>\n            </Link>\n          </li>\n          <li className=\"nav-text\" key=\"stake\">\n            <Link to=\"/dapp-staking/stake\">\n              <span>Stake</span>\n            </Link>\n          </li>\n          <li className=\"nav-text\" key=\"addliquidity\">\n            <Link to=\"/dapp-staking/add-liquidity\">\n              <span>Add liquidity</span>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n}\n\nexport default Navbar;\n","import { useState, useEffect } from \"react\";\nimport \"./Staking.css\";\n\nfunction Staking(props) {\n  const {\n    contractCMC,\n    contractCMCStaking,\n    addressCMCStaking,\n    accounts,\n    web3,\n    refreshBalance,\n  } = props;\n  const [tokenAmountToStake, setTokenAmountToStake] = useState(\n    \"Enter CMC Token amount you want to stake\"\n  );\n  const [tokenAmountToWidthdraw, setTokenAmountToWidthdraw] = useState(\n    \"Enter CMC Token amount you want to withdraw\"\n  );\n\n  const [balanceCMC, setBalanceCMC] = useState(0);\n  const [rewardEarn, setRewardEarn] = useState(0);\n  const [stakedAmount, setStakedAmount] = useState(0);\n\n  useEffect(() => {\n    //get CMC balance\n    const getCMCBalance = async () => {\n      const valueWei = contractCMC\n        ? await contractCMC.methods.balanceOf(accounts[0]).call()\n        : 0;\n      let valueCMC = web3 ? web3.utils.fromWei(valueWei, \"ether\") : 0;\n      setBalanceCMC(valueCMC);\n    };\n\n    getCMCBalance();\n    getStakedBalance();\n\n    //start timer to display reward\n    const interval = setInterval(() => {\n      getReward();\n    }, 3000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  /***********************Staking management************************ */\n  const handleStakeAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmountToStake(result);\n  };\n\n  const handleStake = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmountToStake);\n    const stakeQty = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const approved = await contractCMC.methods\n      .approve(addressCMCStaking, stakeQty)\n      .send({\n        from: accounts[0],\n      });\n    if (approved) {\n      const transact = await contractCMCStaking.methods\n        .stake(stakeQty)\n        .send({ from: accounts[0] });\n      getStakedBalance();\n      refreshBalance(\"refresh after stake\");\n      setTokenAmountToStake(\"\");\n    }\n  };\n\n  /***********************Widthdraw management************************ */\n  const handleWidthdrawAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmountToWidthdraw(result);\n  };\n\n  const handleWithdraw = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmountToWidthdraw);\n    const withdrawQty = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const transact = await contractCMCStaking.methods\n      .withdraw(withdrawQty)\n      .send({ from: accounts[0] });\n    getStakedBalance();\n    refreshBalance(\"refresh after widthdraw\");\n    setTokenAmountToWidthdraw(\"\");\n  };\n\n  /***********************Get staked amout info************************ */\n  const getStakedBalance = async () => {\n    if (contractCMCStaking) {\n      let stakedBalance = await contractCMCStaking.methods\n        .balanceOf(accounts[0])\n        .call();\n      stakedBalance = web3 ? web3.utils.fromWei(stakedBalance, \"ether\") : 0;\n      setStakedAmount(stakedBalance);\n    }\n  };\n\n  /***********************Get reward info*********************** */\n  const getReward = async () => {\n    if (contractCMCStaking) {\n      let reward = await contractCMCStaking.methods.earned(accounts[0]).call();\n      reward = web3 ? web3.utils.fromWei(reward, \"ether\") : 0;\n      setRewardEarn(reward);\n    }\n  };\n\n  /***********************Widthdraw reward************************ */\n  const handleWithdrawReward = async () => {\n    if (contractCMCStaking) {\n      await contractCMCStaking.methods.getReward().send({ from: accounts[0] });\n      getStakedBalance();\n      refreshBalance(\"refresh after get reward\");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"staking-main\">\n        <div className=\"staking-admin-instruction\">\n          <span className=\"admin-instruction\">\n            Please proceed with amount of token you want to set for staking\n          </span>\n        </div>\n        <div className=\"staking-info\">\n          <div>\n            <span className=\"admin-instruction\">\n              Staked amount : {stakedAmount}\n            </span>\n          </div>\n          <div>\n            <span className=\"admin-instruction\">\n              | Rewards earned : {rewardEarn}\n            </span>\n          </div>\n        </div>\n        <div className=\"staking-main-input\">\n          <div className=\"staking-input\">\n            <input\n              className=\"staking-inputTxt\"\n              name=\"stake\"\n              type=\"text\"\n              id=\"stake\"\n              value={tokenAmountToStake}\n              onChange={(e) => handleStakeAmountChange(e)}\n            ></input>\n            <button\n              type=\"button\"\n              className=\"staking-button\"\n              onClick={handleStake}\n              // disabled={duration <= 0 || hasDuration}\n            >\n              <span>Stake</span>\n            </button>\n          </div>\n          <div className=\"widthdraw-input\">\n            <input\n              className=\"widthdraw-inputTxt\"\n              name=\"widthdraw\"\n              type=\"text\"\n              id=\"widthdraw\"\n              value={tokenAmountToWidthdraw}\n              onChange={(e) => handleWidthdrawAmountChange(e)}\n            ></input>\n            <button\n              type=\"button\"\n              className=\"withdraw-button\"\n              onClick={handleWithdraw}\n              disabled={isNaN(tokenAmountToWidthdraw)}\n            >\n              <span>Withdraw</span>\n            </button>\n            <button\n              type=\"button\"\n              className=\"withdrawReward-button\"\n              onClick={handleWithdrawReward}\n              // disabled={duration <= 0 || hasDuration}\n            >\n              <span>Withdraw Reward</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Staking;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Staking from \"./Staking\";\n\nfunction MainStaking({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      accounts,\n      addressCMCStaking,\n      web3,\n    },\n  } = useEth();\n\n  return (\n    <div className=\"main\">\n      {/* <Swap addressCMC={addressCMC} />\n      <hr /> */}\n      {\n        <Staking\n          contractCMC={contractCMC}\n          contractCMCStaking={contractCMCStaking}\n          addressCMCStaking={addressCMCStaking}\n          accounts={accounts}\n          web3={web3}\n          refreshBalance={refreshBalance}\n        />\n      }\n    </div>\n  );\n}\n\nexport default MainStaking;\n","import { useState, useEffect } from \"react\";\nimport \"./Mint.css\";\nimport React from \"react\";\n\nfunction Mint(props) {\n  const {\n    contractCMC,\n    contractCMCStaking,\n    addressCMCStaking,\n    accounts,\n    web3,\n    refreshBalance,\n  } = props;\n  const [tokenAmountToMint, setTokenAmountToMint] = useState(\n    \"Enter CMC Token amount you want to mint\"\n  );\n\n  /***********************Mint management************************ */\n  const handleMintAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmountToMint(result);\n  };\n\n  const handleMint = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmountToMint);\n    const mintQty = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const transact = await contractCMC.methods\n      .mint(mintQty)\n      .send({ from: accounts[0] });\n    refreshBalance(\"refresh after mint\");\n    setTokenAmountToMint(\"\");\n  };\n\n  return (\n    <div className=\"staking-mainMint\">\n      <span className=\"admin-instruction\">\n        Please enter you amount of CMC token you want to mint. Max is 1000 token\n        !\n      </span>\n      <div className=\"mint-input\">\n        <input\n          className=\"mint-inputTxt\"\n          name=\"mint\"\n          type=\"text\"\n          id=\"mint\"\n          value={tokenAmountToMint}\n          onChange={(e) => handleMintAmountChange(e)}\n        ></input>\n        <button\n          type=\"button\"\n          className=\"mint-button\"\n          onClick={handleMint}\n          // disabled={duration <= 0 || hasDuration}\n        >\n          <span>Mint</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Mint;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Mint from \"./Mint\";\n\nfunction MainMint({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      accounts,\n      addressCMCStaking,\n      addressCMC,\n      web3,\n      networkID,\n      isOwnerCMC,\n      isOwnerCMCStaking,\n    },\n  } = useEth();\n\n  return (\n    <div className=\"main\">\n      {/* <Swap addressCMC={addressCMC} />\n      <hr /> */}\n      {\n        <Mint\n          contractCMC={contractCMC}\n          contractCMCStaking={contractCMCStaking}\n          addressCMCStaking={addressCMCStaking}\n          accounts={accounts}\n          web3={web3}\n          refreshBalance={refreshBalance}\n        />\n      }\n    </div>\n  );\n}\n\nexport default MainMint;\n","import { useState, useEffect } from \"react\";\nimport \"./StakingAdmin.css\";\n\nfunction StakingAdmin(props) {\n  const {\n    contractCMC,\n    contractCMCStaking,\n    addressCMCStaking,\n    accounts,\n    web3,\n    adminInstruction,\n  } = props;\n  const [duration, setDuration] = useState(\"Enter reward duration in (s)\");\n  const [hasDuration, setHasDuration] = useState(false);\n  const [tokenAmount, setTokenAmount] = useState(\n    \"Enter CMC Token amount for reward\"\n  );\n  const [hasTokenAmount, setHasTokenAmount] = useState(false);\n  const [hasRewardAddressDefined, setRewardAddressDefine] = useState(false);\n  const [finishAt, setFinishAt] = useState(0);\n  const [blockTimestamp, setBlockTimestamp] = useState(0);\n\n  useEffect(() => {\n    isDurationAlreadySet();\n    isTokenAmountAlreadySet();\n  });\n\n  const isDurationAlreadySet = async () => {\n    const value = await contractCMCStaking.methods.duration().call();\n    if (value && value > 0) {\n      setDuration(value);\n      setHasDuration(true);\n    }\n  };\n\n  const isTokenAmountAlreadySet = async () => {\n    const block = await web3.eth.getBlock(\"latest\");\n    setBlockTimestamp(block.timestamp);\n    const value = await contractCMCStaking.methods.finishAt().call();\n    if (value && value > 0) {\n      setFinishAt(value);\n      //setHasTokenAmount(true);\n    }\n  };\n\n  const isRewardAddressDefined = async () => {\n    const value = await contractCMC.methods.stakingContract().call();\n    if (value) {\n      setRewardAddressDefine(true);\n    }\n  };\n\n  const handleDurationChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setDuration(result);\n  };\n\n  const handleSetDuration = async () => {\n    console.log(duration);\n    console.log(contractCMCStaking);\n    const transact = await contractCMCStaking.methods\n      .setRewardsDuration(duration)\n      .send({ from: accounts[0] });\n    setHasDuration(true);\n    // showEvent(\n    //   \"Voter added  :\" +\n    //     transact.events.VoterRegistered.returnValues.voterAddress\n    // );\n  };\n\n  const handleSetTokenAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value.replace(/\\D/g, \"\");\n    setTokenAmount(result);\n  };\n\n  const handleSetTokenAmount = async () => {\n    let decimals = web3.utils.toBN(18);\n    const amount = web3.utils.toBN(tokenAmount);\n    const rewards = amount.mul(web3.utils.toBN(10).pow(decimals));\n    const transact = await contractCMCStaking.methods\n      .defineRewardAmount(rewards)\n      .send({ from: accounts[0] });\n    isTokenAmountAlreadySet();\n    // showEvent(\n    //   \"Voter added  :\" +\n    //     transact.events.VoterRegistered.returnValues.voterAddress\n    // );\n  };\n\n  const handleSetContractAddressForRewardMinting = async () => {\n    const transact = await contractCMC.methods\n      .setStakingContractAddress(addressCMCStaking)\n      .send({ from: accounts[0] });\n    setRewardAddressDefine(true);\n    // showEvent(\n    //   \"Voter added  :\" +\n    //     transact.events.VoterRegistered.returnValues.voterAddress\n    // );\n  };\n\n  return (\n    <>\n      <div className=\"stakingAdmin-main\">\n        <span className=\"admin-instruction\">{adminInstruction}</span>\n        <div className=\"stakingAdmin-info\">\n          <div>\n            <span className=\"admin-instruction\">\n              Current block time is : {blockTimestamp}\n            </span>\n          </div>\n          <div>\n            <span className=\"admin-instruction\">\n              | Program finish at : {finishAt}\n            </span>\n          </div>\n        </div>\n        <div className=\"stakingAdmin-duration\">\n          <div className=\"duration-input\">\n            <input\n              className=\"duration-inputTxt\"\n              name=\"duration\"\n              type=\"text\"\n              id=\"duration\"\n              value={duration}\n              onChange={(e) => handleDurationChange(e)}\n              disabled={hasDuration}\n            ></input>\n            <button\n              type=\"button\"\n              className=\"duration-button\"\n              onClick={handleSetDuration}\n              disabled={duration <= 0 || hasDuration}\n            >\n              <span>Set duration</span>\n            </button>\n          </div>\n          <div className=\"stakingAdmin-tokenAmount\">\n            <div className=\"tokenAmount-input\">\n              <input\n                className=\"tokenAmount-inputTxt\"\n                name=\"tokenAmount\"\n                type=\"text\"\n                id=\"tokenAmount\"\n                value={tokenAmount}\n                onChange={(e) => handleSetTokenAmountChange(e)}\n                // disabled={hasTokenAmount}\n              ></input>\n              <button\n                type=\"button\"\n                className=\"tokenAmount-button\"\n                onClick={handleSetTokenAmount}\n                // disabled={tokenAmount <= 0 || hasTokenAmount}\n              >\n                <span>Set token amount</span>\n              </button>\n            </div>\n            <div className=\"stakingAdmin-mintAdress\">\n              <button\n                type=\"button\"\n                className=\"setAdressForReward-button\"\n                onClick={handleSetContractAddressForRewardMinting}\n                disabled={hasRewardAddressDefined}\n              >\n                <span>Allow this contract for reward minting</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default StakingAdmin;\n","import { useState, useEffect } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport StakingAdmin from \"./StakingAdmin\";\n\nfunction MainStakingAdmin({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      contractCMC,\n      contractCMCStaking,\n      contractCMCLiquidity,\n      accounts,\n      addressCMCStaking,\n      addressCMCLiquidity,\n      web3,\n      networkID,\n      isOwnerCMC,\n      isOwnerCMCStaking,\n    },\n  } = useEth();\n\n  return (\n    <div className=\"main\">\n      <StakingAdmin\n        key=\"simpleStaking\"\n        contractCMC={contractCMC}\n        contractCMCStaking={contractCMCStaking}\n        addressCMCStaking={addressCMCStaking}\n        accounts={accounts}\n        web3={web3}\n        adminInstruction={\n          \"Admin please proceed with SIMPLE staking program configuration\"\n        }\n      />\n      <hr></hr>\n      <StakingAdmin\n        key=\"liquidityStaking\"\n        contractCMC={contractCMC}\n        contractCMCStaking={contractCMCLiquidity}\n        addressCMCStaking={addressCMCLiquidity}\n        accounts={accounts}\n        web3={web3}\n        adminInstruction={\n          \"Admin please proceed with LIQUIDITY staking program configuration\"\n        }\n      />\n    </div>\n  );\n}\n\nexport default MainStakingAdmin;\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./AddLiquidity.css\";\n\nfunction AddLiquidity(props) {\n  const {\n    artifactERC20,\n    addressCMC,\n    addressCMCLiquidity,\n    contractCMC,\n    contractCMCLiquidity,\n    accounts,\n    web3,\n    refreshBalance,\n  } = props;\n\n  //const addressWETHRopsten = \"0xc778417E063141139Fce010982780140Aa0cD5Ab\";\n  const addressWETHRopsten = \"0xbf4c0a77A3072FDaFC60e5758bC0243d40358f29\";\n\n  const [tokenAmountToAddCMC, setTokenAmountToAddCMC] = useState(\n    \"Enter CMC Token amount you want to add\"\n  );\n\n  const [tokenAmountToAddWETH, setTokenAmountToAddWETH] = useState(\n    \"Enter WETH Token amount you want to add\"\n  );\n\n  const [pairAdress, SetPairAdress] = useState(0);\n  const [lpAmount, setLPAmount] = useState(0);\n  const [lpStakedAmount, setLPStakedAmount] = useState(0);\n  const [rewardEarn, setRewardEarn] = useState(0);\n\n  useEffect(() => {\n    getPairAdress();\n    getLPBalance();\n    getLPStaked();\n    //start timer to display reward\n    const interval = setInterval(() => {\n      getReward();\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  /***********************add liquidity management************************ */\n  const handleCMCAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value\n      .replace(/[^0-9.]/g, \"\")\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      .replace(/^0[^.]/, \"0\");\n    setTokenAmountToAddCMC(result);\n  };\n\n  const handleWETHAmountChange = (e) => {\n    const { value } = e.target;\n    //remove non numeric character\n    const result = value\n      .replace(/[^0-9.]/g, \"\")\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      .replace(/^0[^.]/, \"0\");\n    setTokenAmountToAddWETH(result);\n  };\n\n  const handleAddLiquidity = async () => {\n    const amountCMC = web3.utils.toBN(tokenAmountToAddCMC * 1e18);\n    const amountWETH = web3.utils.toBN(tokenAmountToAddWETH * 1e18);\n    //const qtyCMC = amountCMC.mul(web3.utils.toBN(10).pow(decimals));\n    //const qtyWETH = amountWETH.mul(web3.utils.toBN(10).pow(decimals));\n\n    //approve CMC liquidity\n    const approvedCMC = await contractCMC.methods\n      .approve(addressCMCLiquidity, amountCMC)\n      .send({\n        from: accounts[0],\n      });\n\n    //approve WETH\n    const contractWETH = new web3.eth.Contract(\n      artifactERC20[\"abi\"],\n      addressWETHRopsten\n    );\n\n    const approvedWETH = await contractWETH.methods\n      .approve(addressCMCLiquidity, amountWETH)\n      .send({\n        from: accounts[0],\n      });\n\n    if (approvedCMC && approvedWETH) {\n      try {\n        const transac = await contractCMCLiquidity.methods\n          .addLiquidity(addressWETHRopsten, addressCMC, amountWETH, amountCMC)\n          .send({ from: accounts[0] });\n        // const transact = await contractCMC.methods\n        //   .mint(mintQty)\n        //   .send({ from: accounts[0] });\n\n        refreshBalance(\"refresh after add liquidity\");\n        setTokenAmountToAddCMC(\"\");\n        setTokenAmountToAddWETH(\"\");\n      } catch (err) {\n        console.log(\"Error when adding liquidity : \" + err);\n      }\n    }\n  };\n\n  /************************Handle stake liquidity************************** */\n\n  const handleStakeLiquidity = async () => {\n    const amount = 0.1 * 1e18;\n    const stakeQty = web3.utils.toBN(amount);\n    const contractPair = new web3.eth.Contract(\n      artifactERC20[\"abi\"],\n      pairAdress\n    );\n\n    //we approve cmc liquidity contract to manage LP and stake them\n    const approved = await contractPair.methods\n      .approve(addressCMCLiquidity, stakeQty)\n      .send({\n        from: accounts[0],\n      });\n    console.log(\"approved\");\n    let transac;\n    if (approved) {\n      try {\n        transac = await contractCMCLiquidity.methods\n          .stake(stakeQty)\n          .send({ from: accounts[0] });\n        refreshBalance(\"refresh after stake lp\");\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  /************************Remove liquidity************************** */\n\n  const handleRemoveLiquidity = async () => {\n    //approve WETH\n    const contractPair = new web3.eth.Contract(\n      artifactERC20[\"abi\"],\n      pairAdress\n    );\n\n    const amount = lpAmount * 1e18;\n    console.log(amount);\n    const approvedPair = await contractPair.methods\n      .approve(addressCMCLiquidity, web3.utils.toBN(amount))\n      .send({\n        from: accounts[0],\n      });\n\n    if (approvedPair) {\n      try {\n        const transac = await contractCMCLiquidity.methods\n          .removeLiquidity(addressWETHRopsten, addressCMC)\n          .send({ from: accounts[0] });\n        // const transact = await contractCMC.methods\n        //   .mint(mintQty)\n        //   .send({ from: accounts[0] });\n        console.log(transac);\n        refreshBalance(\"refresh after remove liquidity\");\n        getLPBalance();\n      } catch (err) {\n        console.log(\"Error when adding liquidity : \" + err);\n      }\n    }\n  };\n\n  /************************Withdraw LP************************** */\n\n  const handleWithdrawLiquidity = async () => {\n    const amount = lpStakedAmount * 1e18;\n    const stakeQty = web3.utils.toBN(amount);\n    const transact = await contractCMCLiquidity.methods\n      .withdraw(stakeQty)\n      .send({ from: accounts[0] });\n    refreshBalance(\"refresh after widthdraw LP\");\n  };\n\n  /************************Withdraw Reward************************** */\n\n  const handleWithdrawReward = async () => {\n    if (contractCMCLiquidity) {\n      await contractCMCLiquidity.methods\n        .getReward()\n        .send({ from: accounts[0] });\n      getLPBalance();\n      refreshBalance(\"refresh after get liq reward\");\n    }\n  };\n\n  /****************Get LP balance **************************************/\n  const getLPBalance = async () => {\n    const contractPair =\n      web3 &&\n      pairAdress &&\n      new web3.eth.Contract(artifactERC20[\"abi\"], pairAdress);\n\n    const balance = contractPair\n      ? await contractPair.methods.balanceOf(accounts[0]).call()\n      : 0;\n\n    let valueLP = web3\n      ? web3.utils.fromWei(web3.utils.toBN(balance), \"ether\")\n      : 0;\n\n    setLPAmount(valueLP);\n  };\n\n  const getLPStaked = async () => {\n    const balance =\n      contractCMCLiquidity &&\n      (await contractCMCLiquidity.methods.balanceOf(accounts[0]).call());\n\n    let valueLP = web3\n      ? web3.utils.fromWei(web3.utils.toBN(balance), \"ether\")\n      : 0;\n\n    setLPStakedAmount(valueLP);\n  };\n\n  /***********************Get reward info*********************** */\n  const getReward = async () => {\n    if (contractCMCLiquidity) {\n      let reward = await contractCMCLiquidity.methods\n        .earned(accounts[0])\n        .call();\n      reward = web3 ? web3.utils.fromWei(reward, \"ether\") : 0;\n      setRewardEarn(reward);\n    }\n  };\n\n  const getPairAdress = async () => {\n    const addr =\n      contractCMCLiquidity &&\n      (await contractCMCLiquidity.methods\n        .getPairAdress(addressWETHRopsten, addressCMC)\n        .call());\n    SetPairAdress(addr);\n    console.log(\"pair address : \" + addr);\n  };\n\n  return (\n    <div className=\"addLiquidity-main\">\n      <span className=\"admin-instruction\">\n        Please add liquitiy. For now now only CMC/WETH pair is available. More\n        will come soon !\n      </span>\n      <div className=\"lp-info\">\n        <div>\n          <span className=\"admin-instruction\">lp amount : {lpAmount}</span>\n        </div>\n        <div>\n          <span className=\"admin-instruction\">\n            | lp staked : {lpStakedAmount}\n          </span>\n        </div>\n        <div>\n          <span className=\"admin-instruction\">\n            | Rewards earned : {rewardEarn}\n          </span>\n        </div>\n      </div>\n      <div className=\"addLiquidity-operation\">\n        <div className=\"addLiquidity-asset\">\n          <div className=\"input-box\">\n            <input\n              className=\"tokenCMC-inputTxt\"\n              name=\"tokenCMC\"\n              type=\"text\"\n              id=\"tokenCMC\"\n              value={tokenAmountToAddCMC}\n              onChange={(e) => handleCMCAmountChange(e)}\n            ></input>\n            <span className=\"unit\">CMC</span>\n          </div>\n          <div className=\"input-box\">\n            <input\n              className=\"tokenWETH-inputTxt\"\n              name=\"tokenWETH\"\n              type=\"text\"\n              id=\"tokenWETH\"\n              value={tokenAmountToAddWETH}\n              onChange={(e) => handleWETHAmountChange(e)}\n            ></input>\n            <span className=\"unit\">WETH</span>\n          </div>\n        </div>\n        <div className=\"addLiquidity-deposit\">\n          <button\n            type=\"button\"\n            className=\"addLiquidity-button\"\n            onClick={handleAddLiquidity}\n            // disabled={duration <= 0 || hasDuration}\n          >\n            <span>Add liquidity</span>\n          </button>\n        </div>\n      </div>\n      <div className=\"withdrawLiquidity-operation\">\n        <div className=\"stakeLiquidity-stake\">\n          <button\n            type=\"button\"\n            className=\"stakeLiquidity-button\"\n            onClick={handleStakeLiquidity}\n            disabled={!lpAmount > 0}\n          >\n            <span>Stake LP</span>\n          </button>\n        </div>\n        <div className=\"withdrawLiquidity-remove\">\n          <button\n            type=\"button\"\n            className=\"removeLiquidity-button\"\n            onClick={handleRemoveLiquidity}\n            disabled={!lpAmount > 0}\n          >\n            <span>Remove LP</span>\n          </button>\n        </div>\n        <div className=\"withdrawLiquidity-lp\">\n          <button\n            type=\"button\"\n            className=\"withdrawLiquidityLp-button\"\n            onClick={handleWithdrawLiquidity}\n            disabled={!lpAmount > 0}\n          >\n            <span>Withdraw LP</span>\n          </button>\n        </div>\n        <div className=\"withdrawLiquidity-reward\">\n          <button\n            type=\"button\"\n            className=\"withdrawReward-button\"\n            onClick={handleWithdrawReward}\n            // disabled={duration <= 0 || hasDuration}\n          >\n            <span>Withdraw rewards</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddLiquidity;\n","import React from \"react\";\nimport AddLiquidity from \"./AddLiquidity\";\nimport useEth from \"../../contexts/EthContext/useEth\";\n\nfunction MainAddLiquidity({ refreshBalance }) {\n  const {\n    state,\n    state: {\n      artifactERC20,\n      addressCMC,\n      addressCMCLiquidity,\n      contractCMC,\n      contractCMCLiquidity,\n      accounts,\n      web3,\n      networkID,\n      isOwnerCMC,\n      isOwnerCMCStaking,\n    },\n  } = useEth();\n\n  return (\n    <AddLiquidity\n      artifactERC20={artifactERC20}\n      addressCMC={addressCMC}\n      addressCMCLiquidity={addressCMCLiquidity}\n      contractCMC={contractCMC}\n      contractCMCLiquidity={contractCMCLiquidity}\n      accounts={accounts}\n      web3={web3}\n      refreshBalance={refreshBalance}\n    />\n  );\n}\n\nexport default MainAddLiquidity;\n","import { EthProvider } from \"./contexts/EthContext\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport useEth from \"./contexts/EthContext/useEth\";\nimport Intro from \"./components/Intro/\";\nimport Footer from \"./components/Footer/Footer\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport MainStaking from \"./components/Staking\";\nimport MainMint from \"./components/Mint\";\nimport MainStakingAdmin from \"./components/StakingAdmin\";\nimport \"./App.css\";\nimport MainAddLiquidity from \"./components/AddLiquidity\";\n\nfunction App() {\n  const [userInfo, SetUserInfo] = useState();\n  const [isOwner, setIsOwner] = useState(false);\n\n  const refreshBalance = (info) => {\n    SetUserInfo(info);\n  };\n\n  const refreshOwner = (isOwner) => {\n    setIsOwner(isOwner);\n  };\n\n  return (\n    <BrowserRouter>\n      <EthProvider>\n        <div id=\"App\">\n          {!isOwner && <div className=\"app-navbar\">{<Navbar />}</div>}\n          <div className=\"container\">\n            <Intro\n              userInfo={userInfo}\n              refreshBalance={refreshBalance}\n              refreshOwner={refreshOwner}\n            />\n\n            <Routes>\n              <Route\n                path=\"/dapp-staking/\"\n                element={\n                  isOwner ? (\n                    <MainStakingAdmin />\n                  ) : (\n                    <div className=\"welcome\">\n                      <span className=\"instruction\">\n                        Welcome to CMC staking dapp. Please first mint some\n                        token then enjoy staking !!!\n                      </span>\n                    </div>\n                  )\n                }\n              />\n              <Route\n                path=\"/dapp-staking/mint\"\n                element={\n                  !isOwner ? (\n                    <MainMint refreshBalance={refreshBalance} />\n                  ) : (\n                    <Navigate to=\"/dapp-staking\" replace />\n                  )\n                }\n              />\n              <Route\n                path=\"/dapp-staking/stake\"\n                element={\n                  !isOwner ? (\n                    <MainStaking refreshBalance={refreshBalance} />\n                  ) : (\n                    <Navigate to=\"/dapp-staking\" replace />\n                  )\n                }\n              />\n              <Route\n                path=\"/dapp-staking/add-liquidity\"\n                element={\n                  !isOwner ? (\n                    <MainAddLiquidity refreshBalance={refreshBalance} />\n                  ) : (\n                    <Navigate to=\"/dapp-staking\" replace />\n                  )\n                }\n              />\n\n              {/* <Main refreshBalance={refreshBalance} /> */}\n\n              <Route\n                path=\"*\"\n                element={<Navigate to=\"/dapp-staking\" replace />}\n              />\n            </Routes>\n            <Footer />\n          </div>\n        </div>\n      </EthProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}